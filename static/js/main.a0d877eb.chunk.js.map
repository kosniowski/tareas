{"version":3,"sources":["components/TodoItem.jsx","components/Todolist.jsx","App.jsx","index.js"],"names":["TodoItem","todo","toggleTodo","id","task","completed","style","fontFamily","listStyle","fontSize","type","checked","onChange","Todolist","todos","map","KEY","App","useState","setTodos","todoTaskRef","useRef","useEffect","storedTodos","JSON","parse","localStorage","getItem","setItem","stringify","Paper","padding","width","display","margin","maxWidth","background","elevation","textAlign","height","color","paddingLeft","ref","placeholder","marginLeft","Button","variant","onClick","current","value","prevTodos","uuidv4","newTodos","find","filter","length","reactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.a0d877eb.chunk.js","sourcesContent":["import React from 'react';\r\n//import { Input } from '@material-ui/core';\r\n\r\n\r\nexport function TodoItem({ todo, toggleTodo }) {\r\n    const { id, task, completed } = todo;\r\n\r\n    // creamos una funcion para poder pasarle toggletodo como argumento\r\n\r\n    const handleTodoClick = () => {\r\n        toggleTodo(id);\r\n    };\r\n\r\n    return (\r\n        <li style={{fontFamily: 'monospace',listStyle: 'none',fontSize: '20px'}}>\r\n            <input type='checkbox' checked={completed} onChange={handleTodoClick} /> {task}\r\n        </li>\r\n          \r\n    );\r\n}\r\n","import React from 'react'\r\nimport { TodoItem } from './TodoItem'\r\n\r\nexport function Todolist({ todos ,toggleTodo }) {\r\n    return (<ul >\r\n        {todos.map((todo) => (\r\n            <TodoItem  key={todo.id} todo ={todo} toggleTodo ={toggleTodo} />\r\n        ))}\r\n    </ul>\r\n       \r\n    )\r\n}\r\n","\r\nimport React, { Fragment, useState, useRef, useEffect } from 'react';\r\n// componente lista de todos\r\nimport { Todolist } from './components/Todolist';\r\n// importamos id aletorios\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { Button } from '@material-ui/core';\r\nimport { Paper } from '@material-ui/core';\r\n\r\n\r\n\r\n// constante de almacenamiento local\r\n\r\nconst KEY ='todoApp.todos'\r\n\r\nexport function App(){\r\n\r\n    const [todos, setTodos] = useState([\r\n        // pasamos un array  con datos usando el hook de estado\r\n        { id: 1, task: 'Tarea 1', completed: false },\r\n    ]);\r\n\r\n    // hook de referencia\r\n\r\n    const todoTaskRef = useRef();\r\n\r\n    // hook de ciclo de vida 1 estado inicial\r\n    useEffect(() => {\r\n        const storedTodos = JSON.parse(localStorage.getItem(KEY));\r\n        if (storedTodos) {\r\n            setTodos(storedTodos);\r\n        }\r\n    }, []);\r\n\r\n\r\n    // hook de ciclo de vida 2 mantnimiento de informacion \r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(KEY, JSON.stringify(todos));\r\n     }, [todos]);\r\n\r\n    // funcion de completadas\r\n\r\n    const toggleTodo = (id) => {\r\n        const newTodos = [...todos];\r\n        const todo = newTodos.find((todo) => todo.id === id);\r\n        todo.completed = !todo.completed;\r\n        setTodos(newTodos);\r\n    }\r\n\r\n    // funcion de agregar\r\n\r\n    const handleTodoAdd = () => {\r\n        const task = todoTaskRef.current.value;\r\n        if (task === '') return;\r\n    \r\n\r\n        setTodos((prevTodos) => {\r\n            return [...prevTodos, { id: uuidv4(), task, completed: false }]\r\n        });\r\n        // reset  el valor de tareas\r\n        todoTaskRef.current.value = null;\r\n    };\r\n    \r\n    /// eliminar tareas completadas\r\n\r\n    const handleClearAll = () => {\r\n        const newTodos = todos.filter((todo) => !todo.completed);\r\n        setTodos(newTodos);\r\n    }\r\n\r\n    return (\r\n        // utilizamos fragment para evitar errores en el estilado\r\n        <Fragment >\r\n            \r\n            <Paper style={{ padding: '20px', width: 'auto', display: 'float', margin: 'auto', maxWidth: '200em', background: '#ECE9D5' }} elevation={6} >\r\n\r\n              <Paper style={{ padding: '20px', width: 'auto', display:'float', margin: 'auto', background:'#2ECDBF', maxWidth:'19em'}} elevation={6} >   \r\n                    <h1 style={{ padding: '10px', width: 'auto', display: 'float', margin: 'auto', textAlign: 'center', fontFamily: 'monospace' }}>LISTA DE TAREAS</h1>\r\n                    </Paper>\r\n\r\n            <div style={{ display:'white', height: '10px'}}></div>\r\n            \r\n            <Paper style={{ padding: '20px', width: 'auto', display:'float', margin: 'auto', background: '#33333D',maxWidth:'16em'}} elevation={6} >\r\n                <h2 style={{textAlign:'center', fontFamily: 'monospace', color:'white'}}>ESCRIBE UNA NUEVA TAREA</h2>\r\n\r\n               <div style={{paddingLeft:'3em'}}>  <input style={{fontFamily: 'monospace'}} ref={todoTaskRef} type='text' placeholder=\"Nueva Tarea\" />\r\n                     </div>\r\n                <div style={{ display: 'white', height: '10px' }}></div>\r\n                \r\n               <div style={{marginLeft: '6em'}}> <Button variant=\"contained\" color=\"primary\" onClick={handleTodoAdd} >‚ûï</Button>\r\n               \r\n              </div>\r\n             </Paper>\r\n\r\n                \r\n            <div style={{ display:'white', height: '10px'}}></div>\r\n            \r\n             <Paper style={{ padding: '20px', width: 'auto', display:'float', margin: 'auto', background:'#2ECDBF', maxWidth:'16em'}} elevation={6} >\r\n               \r\n                  <h2 style={{textAlign:'center', fontFamily: 'monospace'}}>TAREAS PENDIENTES</h2>\r\n                <Todolist todos={todos} toggleTodo={toggleTodo} />\r\n                 <a>{' '}</a>\r\n                   \r\n               <div style={{marginLeft: '6em'}}>   <Button variant=\"contained\" color=\"secondary\" onClick={handleClearAll} >üóëÔ∏è</Button> </div>  \r\n                    <p style={{textAlign:'center', fontFamily: 'monospace'}}>Selecciona y elimina las tareas terminadas</p>\r\n            </Paper>\r\n\r\n             \r\n            <div style={{ display:'white', height: '10px'}}></div>\r\n            \r\n            <Paper style={{ padding: '20px', width: 'auto', display: 'float', margin: 'auto', background: '#33333D',maxWidth:'19em', color:'white'}} elevation={6} >\r\n                 \r\n                <h2 style={{ fontFamily: 'monospace',textAlign: 'center'}}>Te quedan {todos.filter((todo) => !todo.completed).length} Tareas por terminar !!!</h2>\r\n                </Paper>\r\n                </Paper>\r\n       \r\n     </Fragment>           \r\n    );\r\n}\r\n","\r\nimport React from 'react';\r\nimport reactDom from 'react-dom';\r\nimport { App } from './App';\r\n\r\nreactDom.render(<App/> ,document.getElementById('root'));"],"sourceRoot":""}